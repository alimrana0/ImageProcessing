# ImageProcessing
# Running the program
- See the USEME File


#Citation
The image stars was free to use and taken from https://filesamples.com/formats/ppm
and converted into the correct ppm format using ImageMagick.


#Class Diagrams

![alt text](https://github.com/alimrana0/ImageProcessing/blob/main/diagram1.PNG)

![alt text](https://github.com/alimrana0/ImageProcessing/blob/main/diagram1.PNG)

![alt text](https://github.com/alimrana0/ImageProcessing/blob/main/diagram1.PNG)

#Design Overview
**-- ImageProcessor**
The main processor that executes the runtime of an ImageProcessor.
#model
**-- IImageProcessorModel**
The IImageProcessingModel interface is the primary model interface for a single layered image. It contains all current image processing methods for our model, which are the transformations on an Image that the processor supports.
**-- IImageProcessingSession**
The IImageProcessingModel interface is our primary model interface for a multilayered image. It contains all current image processing methods for our model, which are the transformations on an Image that the processor supports. It also allows for the manipulation of the layers in the image, such as getting, adding, removing, and hiding the images.
**-- ImageProcessingModel**
The ImageProcessingModelImpl is the primary model class, which functions as a caller on transformations on an image.
**-- ImageProcessingSession**
The ImageProcessingSession is a class that handles the saving/loading of files. It acts as a transient holder for images being processed in the controller.
**-- ImageProcessingSessionImpl**
The ImageProcessingSession is a class that handles the saving/loading of files of a multilayered image model and the transformations/filtering on these image layers. It acts as a transient holder for images being processed in the controller.
##graph
**-- Histogram**
The Histogram class is a class that represents the mapping of lines on a graph represented as red, green, blue, and intensity values.
**-- Line**
The Line class is a class that represents a connection of multiple Position2Ds in a specified color.
**-- Position2D**
The Position2D class is a class that represented a 2D positional coordinate.
##Imaging
**-- IColor**.
The color interface contains methods to retrieve red,green, and blue color values from wherever they are stored.
**-- Color**
The Color class implements the Color interface. It represents an RGB color. It contains methods that override the equal and hashcode methods to find color equivalency.
**-- Posn**
The Posn class Represents an 2D Cartesian coordinate.
**-- ImageOfPixel**.
The ImageOfPixel interface is an interface that represents an Image contrived of pixels. The two methods in this interface either retrieve a 2D list of pixels representing the image or saves the image as a PPM file.
**-- Image**.
The Image class implements the ImageOfPixel interface. It replicates the pixels in the image and saves them.
###pixel
**-- IPixel**
The IPixel interface represents a pixel. It contains methods to get the color of the position of the pixel in an image.
**-- Pixel**
The Pixel class implements the Pixel interface. It overrides the equals and hashcode to find pixel equivalency.
#filters
**-- FilterClamp**
The FilterClamp class clamps any RGB value to a minimum value of 0 or maximum value of 255.
**-- AbstractImageProcessing**
This is an abstract class that represents any filter on an image/pixel using kernels. Includes things like image blur or image sharpening.
**-- BlurFilter**
The BlurFilter class creates an instance that creates a kernel matrix that will allow for an image to be blurred.
**-- SharpenFilter**
The SharpenFilter class creates an instance that creates a kernel matrix that will allow for an image to be sharpened.
**-- IFilter**
The IFilter interface class holds one method that allows for the general filtering of an Image.
**-- IKernel**
The IKernel interface represents a kernel that holds a square matrix that can be used to manipulate an image through its matrix values.
**-- Kernel**
The Kernel class implements IKernel. It holds general methods to get the kernel's width, height, and values, as well as a method to retrieve a value of the matrix at a specific index.
##ColorTransformation
**-- AbstractColorTransformation**
This is an abstract class that represents the many transformations we can do on the color of an image/pixel. Includes things like greyscaling an image, visualizing the red, green, and blue components of an image, or visualizing the intensity of an image.
**-- IColorTransform**
The IColorTransform interface contains one method that applies a color transformation to an image.
**-- IntensityChange**
A class that represents an intensity transformation, which just sets each pixel to the average of the three components for that pixel.
**-- ValueChange**
This is a class that represents a value transformation, which sets each rgb value to the maximum value of the three components for each pixel.
**-- AbstractColorTransformationProcessor**
This is an abstract class that represents any color transformation on an image/pixel using kernels. Includes things like image greyscale or image sepia.
**-- GreyscaleTransformation**
This is a class that represents a greyscale transformation, which sets matrix values for RGB components for a pixel to be transformed into its greyscale version.
**-- SepiaTransformation**
This is a class that represents a sepia transformation, which sets matrix values for RGB components for a pixel to be transformed into its sepia version.
###Greyscale
**-- BlueGreyscale**.
The BlueGreyscale class represents a greyscale transformation on the blue component of an image. All RGB color values are set to the image's blue component value.
**-- GreenGreyscale**.
The GreenGreyscale class represents a greyscale transformation on the green component of an image. All RGB color values are set to the image's green component value. **--RedGreyscale**.
**-- RedGreyscale**
The RedGreyscale class represents a greyscale transformation on the red component of an image. All RGB color values are set to the image's red component value.
**-- LumaGreyscale**
The LumaGreyscale class represents a luma greyscale transformation, which uses the weighted sum of 0.2126r + 0.7152g + 0.0722b to set the RGB values to greyscale the image.
##IntensityTransformation
**-- AbstractIntensityTransformation**
The AbstractIntensityTransformation applies some intensity transformation on a given image and returns the transformed image.
**-- IIntensityTransform**
The IIntensityTransform interface contains one method that applies an intensity transformation to an image.
**-- BrightenTransform**
The BrightenTransform class represents a transformation that adds certain value to the RGB components of an image which effectively brightens the image.
**-- DarkenTransform**
The DarkenTransform class represents a transformation that subtracts certain value to the RGB components of an image which effectively darkens the image.
##FlippingTransformation
**-- IFlipTransform**
The IFlipTransform interface contains one method that applies a translational transformation to an image.
**-- HorizontalFlip**
The HorizontalFlip class represents an image being flipped over the vertical middle axis.
**-- VerticalFlip**.
The VerticalFlip class represents an image being flipped over the horizontal middle axis.
#controller
**-- ImageController**
The ImageController interface is the primary controller interface for the Image Processor. It contains a single method called run(), which runs the Image Processor based off user input.
**-- ImageControllerImpl**.
The ImageControllerImpl class implements the ImageController interface. It is the primary controller for an Image Processor. This class takes in user input and delegates processing to the model depending on the given commands. It also allows for transformed images to be read and saved.
**-- ImageProcessingController**.
The ImageProcessingController class implements the ImageController interface. It is the primary controller for an Image Processor that deals with multilayered images. This class takes in user input and delegates processing to the model depending on the given commands. It also allows for transformed images to be read,saved, and hidden.
**-- ImageProcessingControllerGUI**.
The ImageProcessingController class implements the ImageController and IViewListener interface. It is the primary controller for an Image Processor that deals with multilayered images and is represented by a GUI. This class takes in user input through a GUI and delegates processing to the model depending on the given commands. It also allows for transformed images to be read,saved, and hidden.
##filereading
**-- ImageReadFile**
The ImageReadFile class is a class that reads in a general image and loads its contents
**-- IReadFile**
The IReadFile interface is an interface that contains one method that operates on an image to read its contents
**-- IReadMultiLayered**
The IReadMultiLayered interface is an interface that reads in a multilayered image and loads its contents
**-- PPMReadFile**
The PPMReadFile class is a class that contains methods to read in a PPM image and return its contents.
**-- ReadMultiLayered**
The ReadMultiLayered class is a class that contains methods to read in a multilayered image by using its contents and visibility to set the file paths and layer IDs.
##filereading
**-- AbstractImageWriteFile**
The AbstractImageWriteFile class is a class that creates an abstraction for an object that would write to a text file given an image's contents.
**-- IImageWriteFile**
The IImageWriteFile interface is an interface that contains one method that will be used to write to a file using an image's contents.
**-- IWriteMultiLayered**
The IWriteMultiLayered interface is an interface that contains one method that will be used to write to a file using a multilayered image's contents using the layer visibilities and IDs.
**-- PPMWriteFile**
The PPMWriteFile class is a class that contains methods to use an image's information to write to a PPM file representation of that image.
*-- PNGWriteFile**
The PNGWriteFile class is a class that contains methods to use an image's information to write to a PNG file representation of that image.
*-- JPEGWriteFile**
The JPEGWriteFile class is a class that contains methods to use an image's information to write to a JPEG file representation of that image.
**-- WriteMultiLayered**
The WriteMultiLayered class is a class that contains methods to use a multilayered image's information to write to a folder that contains the image file representing the image and a text file of its general contents.
#view
**-- IImageProcessingView**
The IImageProcessingView interface contains two methods to display. One renders a given message to the System, and the other shows the client options for commands.
**-- ImageProcessingView**
The ImageProcessingView class implements the IImageProcessingView interface. It performs transformations on the given image based on user inputs. The user may use current files or transform previously saved files.
**-- IImageProcessingGUIView**
The IImageProcessingGUIView interface contains methods to display a GUI that can add and set images.
**-- IViewListener**
The IViewListener interface contains most of the methods that would be required of a GUI representing a multilayered image.
**-- ImageProcessingGUIView**
The ImageProcessingGUIView class extends JFrame implements IImageProcessingGUIView, ActionListener and contains the main code for the GUI display of a multilayered image. It contains every possible action possible by the user, and allows the actions to be interactive by allowing user input to change the view.
##graph
**-- GraphPanel**
The GraphPanel class is a class that creates a JLayeredPanel that constructs a graph of given RGB and intensity values based on the image's pixel information.
